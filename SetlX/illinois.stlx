// This function implements the Illinois-method to compute the zero of
// the function f in the interval [a,b].  
illinois := procedure(f, a, b, n) {
    assert(a < b, "a has to be less than b");
    assert(f(a) < 0 && 0 < f(b), "We need f(a) < 0 and 0 < f(b)!");
    [ fa, fb ] := [ f(a), f(b) ];
    oldA1 := om; oldB1 := om;
    oldA2 := om; oldB2 := om;
    alpha := 1; beta := 1;
    for (k in [1 .. n]) {
        c  := (beta * fb * a - alpha * fa * b) / (beta * fb - alpha * fa);
        fc := f(c);
        if (fc < 0) {
            a := c; fa := fc; alpha := 1;
            if (oldB2 == b) {
                beta /= 2;
            }
        } else if (fc > 0) {
            b := c; fb := fc; beta := 1;
            if (oldA2 == a) {
                alpha /= 2;
            }
        } else { return c; }
        oldA2 := oldA1; oldB2 := oldB1;
        oldA1 := a;     oldB1 := b;
        if (isRational(a) && isRational(b)) {
            print("$k$: a = $nDecimalPlaces(a, 36)$");
            print("    b = $nDecimalPlaces(b, 36)$");
            print("    alpha = $alpha$, beta = $beta$");
        } else {
            print("$k$: a = $a$, b = $b$, alpha = $alpha$, beta = $beta$");
        }
    }
    return (a + b) / 2;
};
 
f := procedure(x) {
    return x ** 4 - 1;
};

// x := illinois(f, 0.0, 10.0, 35);
// print("solution to x ** 4 - 1 = 0 is $x$\n");

g := procedure(x) {
    return x ** 2 - 2;
};

// x := illinois(g, 1, 2, 15);
// print("solution to x ** 2 = 2 is $nDecimalPlaces(x, 41)$\n");

strange := procedure(x) {
    return 1 - 2 / (x * x + 1);
};

// x := illinois(strange, 0.0, 5.0, 20);
// print("solution to 1 - 2 / (x * x + 1) is $x$\n");

x := illinois(x |-> -cos(x), 1, 2, 23);
pi := mathConst("pi");

print("solution of 0 = cos(x): x = $x$");
print("difference: $x - pi/2$");

